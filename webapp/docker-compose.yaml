services:
  db:
    image: postgres:latest
    container_name: webapp-db
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      retries: 3
      start_period: 5s
      timeout: 60s
    volumes:
      - webapp_db_data:/var/lib/postgresql/data

  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - PYVER=3.13
    container_name: webapp
    restart: always
    env_file:
      - .env
    environment:
      # Set to localhost in .env for local development without docker
      - POSTGRES_HOST=db
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:5000/healthcheck
      interval: 5s
      retries: 3
      start_period: 5s
      timeout: 60s

  client:
    image: debian # Good to know alpine date omit milliseconds...
    depends_on:
      web:
        condition: service_healthy
    deploy:
      replicas: 10
    command:
      - /bin/bash
      - -c
      - |
        # tail -f /dev/null
        apt-get -qq update > /dev/null && apt-get -qq install -y curl --no-install-recommends > /dev/null
        while true; do
          curl -sX POST http://web:5000/insert \
              -H "Content-Type: application/json" \
              -d '{"ts": "'$$(date -u +"%Y-%m-%dT%H:%M:%S.%6N")'", "value": "'$$(awk 'BEGIN{srand(); print rand()}')'"}';
          sleep $$((RANDOM % 5 + 1));
        done

volumes:
  webapp_db_data:
